type Value = 
 variant {
   Blob: blob;
   Int: int;
   Nat: nat;
   Text: text;
 };
type TxIndex = nat;
type TransferFromError = 
 variant {
   BadBurn: record {min_burn_amount: Tokens;};
   BadFee: record {expected_fee: Tokens;};
   CreatedInFuture: record {ledger_time: Timestamp;};
   Duplicate: record {duplicate_of: TxIndex;};
   GenericError: record {
                   error_code: nat;
                   message: text;
                 };
   InsufficientAllowance: record {allowance: nat;};
   InsufficientFunds: record {balance: Tokens;};
   TemporarilyUnavailable;
   TooOld;
 };
type TransferError = 
 variant {
   BadBurn: record {min_burn_amount: Tokens;};
   BadFee: record {expected_fee: Tokens;};
   CreatedInFuture: record {ledger_time: Timestamp;};
   Duplicate: record {duplicate_of: TxIndex;};
   GenericError: record {
                   error_code: nat;
                   message: text;
                 };
   InsufficientFunds: record {balance: Tokens;};
   TemporarilyUnavailable;
   TooOld;
 };
type Tokens = nat;
type Timestamp = nat64;
type Subaccount = blob;
type Result_3 = 
 variant {
   Err: TransferError;
   Ok: TxIndex;
 };
type Result_2 = 
 variant {
   Err: ApproveError;
   Ok: TxIndex;
 };
type Result_1 = 
 variant {
   Err: TransferFromError;
   Ok: TxIndex;
 };
type Result = 
 variant {
   Err: CommonError;
   Ok;
 };
type Memo = blob;
type Ledger = 
 service {
   icrc1_balance_of: (Account) -> (Tokens) query;
   icrc1_decimals: () -> (nat8) query;
   icrc1_fee: () -> (nat) query;
   icrc1_metadata: () -> (vec record {
                                text;
                                Value;
                              }) query;
   icrc1_minting_account: () -> (opt Account) query;
   icrc1_name: () -> (text) query;
   icrc1_supported_standards: () ->
    (vec record {
           name: text;
           url: text;
         }) query;
   icrc1_symbol: () -> (text) query;
   icrc1_total_supply: () -> (Tokens) query;
   icrc1_transfer:
    (record {
       amount: Tokens;
       created_at_time: opt Timestamp;
       fee: opt Tokens;
       from_subaccount: opt Subaccount;
       memo: opt Memo;
       to: Account;
     }) -> (Result_3);
   icrc2_allowance: (record {
                       account: Account;
                       spender: Account;
                     }) -> (Allowance) query;
   icrc2_approve:
    (record {
       amount: nat;
       created_at_time: opt Timestamp;
       expected_allowance: opt nat;
       expires_at: opt nat64;
       fee: opt Tokens;
       from_subaccount: opt Subaccount;
       memo: opt Memo;
       spender: Account;
     }) -> (Result_2);
   icrc2_transfer_from:
    (record {
       amount: Tokens;
       created_at_time: opt Timestamp;
       fee: opt Tokens;
       from: Account;
       memo: opt Memo;
       spender_subaccount: opt Subaccount;
       to: Account;
     }) -> (Result_1);
   icrc_plus_cycles: () -> (nat) query;
   icrc_plus_fee_info: () -> (FeeInfo) query;
   icrc_plus_holders_count: () -> (nat) query;
   icrc_plus_logo: () -> (text) query;
   icrc_plus_mint_on: () -> (bool) query;
   icrc_plus_owner: () -> (principal) query;
   icrc_plus_set_owner: (record {owner: principal;}) -> (Result);
 };
type FeeInfo = 
 record {
   burn_fee: nat;
   decimals: nat8;
   transfer_fee: nat;
 };
type CommonError = 
 variant {
   BadFee: record {expected_fee: Tokens;};
   GenericError: record {
                   error_code: nat;
                   message: text;
                 };
   InsufficientFunds: record {balance: Tokens;};
   TemporarilyUnavailable;
 };
type ApproveError = 
 variant {
   AllowanceChanged: record {current_allowance: nat;};
   BadFee: record {expected_fee: Tokens;};
   CreatedInFuture: record {ledger_time: Timestamp;};
   Duplicate: record {duplicate_of: TxIndex;};
   Expired: record {ledger_time: nat64;};
   GenericError: record {
                   error_code: nat;
                   message: text;
                 };
   InsufficientFunds: record {balance: Tokens;};
   TemporarilyUnavailable;
   TooOld;
 };
type Allowance = 
 record {
   allowance: nat;
   expires_at: opt nat64;
 };
type Account = 
 record {
   owner: principal;
   subaccount: opt Subaccount;
 };
service : (record {
             burn_fee: nat;
             decimals: nat8;
             initial_mints:
              vec
               record {
                 account: record {
                            owner: principal;
                            subaccount: opt blob;
                          };
                 amount: nat;
               };
             logo: text;
             minting_account:
              record {
                mint_on: bool;
                owner: principal;
                subaccount: opt blob;
              };
             principal_owner: principal;
             token_name: text;
             token_symbol: text;
             transfer_fee: nat;
           }) -> Ledger
